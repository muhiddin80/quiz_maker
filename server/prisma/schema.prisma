enum Role {
  ADMIN @map("ADMIN")
  USER @map("USER")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  code String  @db.VarChar() 
  name String
  translations QuizTranslation[]
  answerTranslations AnswerTranslation[]

  @@map("language")
  @@id([code])
}

model User{
  id Int @default(autoincrement()) @map("id") @db.Integer
  username String? @map("username") @db.VarChar()
  email String @unique() @map("email") @db.VarChar()
  password String? @map("password") @db.VarChar()
  role Role @default(USER) @map("role")
  token String? @map("token") @db.VarChar()
  collections QuizCollection[]

  @@id([id])
  @@map("users")
}

model QuizCollection{
  id Int @default(autoincrement()) @map("id") @db.Integer
  name String @map("name") @db.VarChar()
  userId Int @map("user_id") @db.Integer
  quizes Quizes[]

  user User @relation(fields: [userId],references: [id],onUpdate: NoAction,onDelete: Cascade)

  @@id([id])
  @@map("quiz_collection")
}

model Quizes {
  id Int  @default(autoincrement()) @map("id") @db.Integer
  imgUrl String? @map("img_url") @db.VarChar()
  collectionId Int @map("collection_id") @db.Integer
  collection QuizCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  answers Answers[]
  correctAnswer CorrectAnswer[]
  translations QuizTranslation[]

@@id([id])
  @@map("quizes")
}

model QuizTranslation {
  id Int  @default(autoincrement())
  question String @db.Text()
  quizId Int
  languageCode String

  quiz Quizes @relation(fields: [quizId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@id([id])
  @@unique([quizId,languageCode])
  @@map("quiz_translation")
}

model Answers {
  id Int @default(autoincrement()) @map("id") @db.Integer
  quizId Int @map("quiz_id") @db.Integer
  quizField Quizes @relation(fields: [quizId], references: [id], onDelete: Cascade)
  translations AnswerTranslation[]

  @@id([id])
  @@map("answers")
}

model AnswerTranslation {
  id Int @default(autoincrement()) @map("id") @db.Integer
  answer String @map("answer") @db.Text()
  answerId Int @map("answer_id") @db.Integer
  languageCode String

  answerRef Answers @relation(fields: [answerId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@unique([answerId,languageCode])

  @@id([id])
  @@map("answer_translation")
}

model CorrectAnswer {
  id Int @id @default(autoincrement())
  quizId Int @unique() @map("quiz_id") @db.Integer
  answerId Int @map("answer_id") @db.Integer
  quizField Quizes @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("correct_answer")
}
